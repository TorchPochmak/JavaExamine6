1)
Классы в Java — это шаблоны для создания объектов, состоящие из полей и методов. Они являются основой объектно-ориентированного программирования.

Интерфейсы определяют контракты с методами без реализации, которые классы должны реализовать, поддерживая множественное наследование через interface.

Перечисления (enums) представляют фиксированный набор констант. Они используются для ограничения значений переменной предопределенными значениями.

abstract обозначает классы и методы, которые не могут быть инстанцированы или должны быть переопределены в подклассах.

interface используется для определения интерфейсов, задающих набор методов, обязательных к реализации.

enum создает набор именованных значений, используемых для задания допустимых параметров.

default позволяет интерфейсам в Java содержать методы с реализацией, которые могут быть изменены в классах.

Абстрактные классы позволяют совместное использование кода через наследование и могут содержать как методы с кодом, так и без. Интерфейсы задают общие стандарты, но не содержат состояние.

Вложенные классы объявляются внутри других классов и используются для логической группировки или ограничения доступа. Они включают статические, внутренние, локальные и анонимные классы.

2)
Logback — это библиотека логирования для Java, конфигурируемая через файл logback.xml. Этот файл задает уровни логирования и способы вывода сообщений.

Логирование в Java помогает отслеживать выполнение программы и диагностировать ошибки, фиксируя состояние и события в логах.

Jackson — для работы с JSON, которая сериализует и десериализует объекты Java в JSON и обратно, широко применима для RESTful сервисов.
Typesafe Config используется для отделения конфигурации Java приложений от кода, поддерживая форматы HOCON, JSON и Java properties, что упрощает управление настройками в разных средах.
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LoggerExample {
    private static final Logger logger = LoggerFactory.getLogger(LoggerExample.class);

    public static void main(String[] args) {
        logger.info("Information message");
        logger.debug("Debugging message");
        logger.error("Error message");
    }
}

<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%date [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="debug">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>